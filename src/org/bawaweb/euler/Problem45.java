/**
 * 
 */
package org.bawaweb.euler;

import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Navroz
 * 
 * Triangular, pentagonal, and hexagonal
		Problem 45
		
		Triangle, pentagonal, and hexagonal numbers are 
		generated by the following formulae:
		Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
		Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
		Hexagonal 	  	Hn=n(2n−1) 	  		1, 6, 15, 28, 45, ...
		
		It can be verified that T285 = P165 = H143 = 40755.
		
		Find the next triangle number that is also pentagonal and hexagonal.
		
		Ans -- 1533776805
		
		
		Output
		-----------------------------------------------
		
		Starting from index 285 -- Triangular Number[285] -- 40755
		_____________________________
		
		
		Next Triangular Number
		Which is BOTH - Pentagular & Hexagonal
		is : 1533776805
		Indexed at T[55385]
		T[55385] == 1533776805
		P[31977] == 1533776805
		H[27693] == 1533776805
				
		
		Note
			used long as int went into overflow

 **************************************************************************/
public class Problem45 {
	
	static Map<String,Long> indexMap = new HashMap<String,Long>();
	static final String T = "Triangular";
	static final String P = "Pentagonal";
	static final String H = "Hexagonal";
	

	static long getTriangularNo(final long n) {	
		return (n*(n+1))/2;			// NOTE - same formula as sum of 1st n nuumbers -- 1+2+3+4+....
	}
	
	static long getPentagonalNo(final long n) {
		return (n*((3*n)-1))/2;
	}
	
	static long getHexagonalNo(final long n) {
		return n*((2*n)-1);
	}
	
	static boolean checkIsTriangularNo(final long aNum) {
		for(long i = 1l; i <= aNum/2; i++) {
			final long triangularNo = getTriangularNo(i);
			
			if( triangularNo == aNum) {	
//				System.out.println(aNum+" is T["+i+"]");	
				indexMap.put(T,i);
				return true;
			}
		}
		return false;
	}
	
	static boolean checkIsPentagonal(final long aNum) {
		for(long i = 1l; i <= (long)Math.sqrt(aNum)+1; i++) {
			if( getPentagonalNo(i) == aNum) {
//				System.out.println(aNum+" is P["+i+"]");
				indexMap.put(P,i);
				return true;
			}
		}
		return false;
	}

	static boolean checkIsHexagonal(long aNum) {
		for(long i = 1l; i <= (long)Math.sqrt(aNum)+1; i++) {
			if( getHexagonalNo(i) == aNum) {
//				System.out.println(aNum+" is H["+i+"]");
				indexMap.put(H,i);
				return true;
			}
		}
		return false;
	}
	
	public static void main(String[] args) {
		final long start = 285l;
		System.out.println("Starting from index "+start+
							" -- Triangular Number["+start+"] -- "+
							getTriangularNo(start)+
							"\n_____________________________\n\n");
		
		long 	tn 		= 0;
		boolean found = false;
		long 	index = start+1;
		
		while( !found ) {
			
			tn = getTriangularNo(index);
			
			if (checkIsTriangularNo(tn)) {
				if (checkIsPentagonal(tn)) {
					if (checkIsHexagonal(tn)) {
						found = true;
						break;
					}
				} 
			}
			index++;
		}
		
		System.out.println("Next Triangular Number\nWhich is BOTH - Pentagular & Hexagonal\nis : "+tn);
		System.out.println("Indexed at T["+index+"]");
		System.out.println("T["+indexMap.get(T)+"] == "+getTriangularNo(indexMap.get(T)));
		System.out.println("P["+indexMap.get(P)+"] == "+getPentagonalNo(indexMap.get(P)));
		System.out.println("H["+indexMap.get(H)+"] == "+getHexagonalNo(indexMap.get(H)));		

	}

}
